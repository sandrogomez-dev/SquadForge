// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // OAuth providers
  steamId       String? @unique
  psnId         String? @unique
  xboxId        String? @unique
  discordId     String? @unique

  // Profile info
  bio           String?
  timezone      String?
  preferredLang String? @default("en")
  
  // Premium subscription
  isPremium     Boolean  @default(false)
  premiumUntil  DateTime?

  // Reputation system
  reputation    Float    @default(0.0)
  totalRatings  Int      @default(0)

  // Relations
  ownedGroups   Group[]  @relation("GroupOwner")
  groupMembers  GroupMember[]
  sentRequests  GroupRequest[] @relation("RequestSender")
  receivedRequests GroupRequest[] @relation("RequestReceiver")
  givenRatings  Rating[] @relation("RatingGiver")
  receivedRatings Rating[] @relation("RatingReceiver")
  chatMessages  ChatMessage[]

  @@map("users")
}

model Game {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Game-specific settings
  maxPlayersPerGroup Int @default(6)
  platforms          String[] // ["PC", "PlayStation", "Xbox", "Switch"]
  
  // Relations
  groups      Group[]
  gameModes   GameMode[]

  @@map("games")
}

model GameMode {
  id          String   @id @default(cuid())
  name        String
  description String?
  gameId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relations
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  groups      Group[]

  @@unique([gameId, name])
  @@map("game_modes")
}

model Group {
  id          String      @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Group settings
  maxMembers  Int         @default(6)
  isPublic    Boolean     @default(true)
  status      GroupStatus @default(OPEN)
  
  // Game info
  gameId      String
  gameModeId  String?
  platform    String      // "PC", "PlayStation", "Xbox", "Switch"
  region      String      // "NA", "EU", "ASIA", etc.
  
  // Schedule
  scheduledAt DateTime?
  timezone    String?
  
  // Premium features
  isPriority  Boolean     @default(false) // Premium groups get priority in search
  
  // Relations
  ownerId     String
  owner       User        @relation("GroupOwner", fields: [ownerId], references: [id])
  game        Game        @relation(fields: [gameId], references: [id])
  gameMode    GameMode?   @relation(fields: [gameModeId], references: [id])
  members     GroupMember[]
  requests    GroupRequest[]
  chatMessages ChatMessage[]

  @@map("groups")
}

model GroupMember {
  id        String           @id @default(cuid())
  userId    String
  groupId   String
  role      GroupMemberRole  @default(MEMBER)
  joinedAt  DateTime         @default(now())
  
  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model GroupRequest {
  id        String        @id @default(cuid())
  senderId  String
  receiverId String?      // null for public groups
  groupId   String
  message   String?
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  sender    User          @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User?         @relation("RequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  group     Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("group_requests")
}

model ChatMessage {
  id        String      @id @default(cuid())
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  // Relations
  userId    String
  groupId   String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Rating {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  
  // Relations
  giverId   String
  receiverId String
  giver     User     @relation("RatingGiver", fields: [giverId], references: [id], onDelete: Cascade)
  receiver  User     @relation("RatingReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([giverId, receiverId])
  @@map("ratings")
}

// Enums
enum GroupStatus {
  OPEN
  FULL
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum GroupMemberRole {
  OWNER
  MODERATOR
  MEMBER
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}
